#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
#''''' ''
"""simple pyglet animation, ms, 07-2016 """

import pyglet
import math
import pyglet.gl as GL

XMAX, YMAX, FPS = 1280, 800, 60  # screen x,y dimensions, target FPS for anim.
PI, TWOPI = math.pi, math.pi*2
e, w, l = 54, 99, 297  #recs : g=screen height/85, e=6*g, w=11*g; h=33*g


##  CANVAS --------------------------------------------------------------------
class Canvas(pyglet.window.Window):
    """ pyglet window, runs a constant circular motion yelding sine and cosine
    """
    def __init__(self, xmax, ymax, fps):
        pyglet.window.Window.__init__(self,fullscreen=True)
        self.set_mouse_visible(False)
        self.xmax, self.ymax, self.fps = xmax, ymax, fps
        self.shapes, self.actions = [], []
        self.omega = 0.5*TWOPI  #angular velocity
        self.alpha = 0.0  #start angle

        pyglet.clock.schedule_interval(self.update, 1.0/fps)
        GL.glTranslatef(self.xmax/2,self.ymax/2, 0.0)  # Origin > screen center
        GL.glClearColor(0.0, 0.0, 0.0, 0.0)  # set background color to black

    def on_key_press(self, symbol, modifiers):
        if symbol == pyglet.window.key.ESCAPE:
            exit()

    def draw(self):
        self.clear()                    # clear graphics
        for shape in self.shapes:
            GL.glPushMatrix()
            GL.glTranslatef(shape.pos[0], shape.pos[1], 0)
            shape.batch.draw()  # * expands list (no append method)
            GL.glPopMatrix()

    def update(self,dt):
        self.alpha += dt * self.omega
        self.alpha = self.alpha % (TWOPI)  # stay within [0,2*Pi]
        # updates 2 coordinates with an harmonic linear osillation
        self.cosa, self.sina = math.cos(self.alpha), math.sin(self.alpha)
        for action in self.actions:
            action.update(dt)
        self.draw()

##--- SHAPES SECTION ----------------------------------------------------------
##--- SIMPLE POINT (autocad style)
class Point(object):
    def __init__(self):
        self.pos = (0,0)
        self.vtx=[-3,0,3,0,0,0,0,3,0,-3]
        self.getbatch()

    def getbatch(self):
        self.batch = pyglet.graphics.Batch()
        self.batch.add(5,pyglet.gl.GL_LINE_STRIP, None, ('v2i/static',
        self.vtx))

##--- SIMPLE LINE
class Line(object):
    def __init__(self,p1,p2):
        self.pos, self.p1, self.p2 = (0,0), p1, p2
        self.getbatch()

    def update(self,dt):  #will update shape in case p1 p2 change
        self.getbatch()

    def getbatch(self):
        self.batch = pyglet.graphics.Batch()
        self.batch.add(2,pyglet.gl.GL_LINES, None, ('v2f/static',
            (self.p1.pos[0],self.p1.pos[1],self.p2.pos[0],self.p2.pos[1])))

##--- SIMPLE RECTANGLE (ortho)
class Rect(object):
    def __init__(self, S=0, E=0, N=w, W=l):
        self.vtx=[E, S, W, S, W, N, E, N]
        self.pos = (0,0)
        self.getbatch()

    def getbatch(self):
        self.batch = pyglet.graphics.Batch()
        self.batch.add(4,pyglet.gl.GL_TRIANGLE_FAN, None, ('v2i/static',
        self.vtx))

##--- CROSSHAIR VERTICAL
class Vline(object):
    def __init__(self):
        self.pos = (0,0)
        self.vtx=[0,0] # x only
        self.getbatch()

    def getbatch(self):
        self.batch = pyglet.graphics.Batch()
        self.batch.add(2,pyglet.gl.GL_LINES, None, ('v2i/static',
        (self.vtx[0],-YMAX,self.vtx[0],YMAX)))

##--- CROSSHAIR HORIZONTAL
class Hline(object):
    def __init__(self):
        self.pos = (0,0)
        self.vtx=[0,0]
        self.getbatch()

    def getbatch(self):
        self.batch = pyglet.graphics.Batch()
        self.batch.add(2,pyglet.gl.GL_LINES, None, ('v2i/static',
        (-XMAX, self.vtx[1],XMAX,self.vtx[1])))

##--- ACTIONS -----------------------------------------------------------------
#--- HARMONIC OSILLATION
class Scotchyoke(object):
    """ a simple link to coordinates generated by canvas circular motion"""
    def __init__(self,target=None, Hradius=1, Vradius=1, center=(0,0),phase=0):
        self.target = target
        self.Hradius, self.Vradius  = Hradius, Vradius
        self.dx,self.dy=center
        self.cosb, self.sinb = math.cos(phase), math.sin(phase)
    def update(self,dt):
        #cos(A+B)=cos A cos B - sin A sin B
        cosab=canvas.cosa*self.cosb-canvas.sina*self.sinb
        #sin(A+B)=sin A cos B + cos A sin B
        sinab=canvas.sina*self.cosb+canvas.cosa*self.sinb
        self.target.pos=(self.dx+cosab*self.Hradius,self.dy+sinab*self.Vradius)


## SCENE SETUP ----------------------------------------------------------------
def position(target, x, y):
    for  i in xrange(0,len(target.vtx),2):
        target.vtx[i] += x
        target.vtx[i+1] += y
        target.getbatch()

def setup(canvas):
    # moving parts
    r1 = Rect()  #sliding, horizontal
    r2 = Rect(N=l,W=w)  #sliding, vertical
    position(r1,-l/2,-w/2)
    position(r2,-w/2,-l/2)
    l1 = Vline()  #moving with r1
    l2 = Hline()  #moving with r2
    position(l1,-w/2,0)
    position(l2,0,-w/2)

    canvas.shapes.extend((r1,r2,l1,l2))

    s1 = Scotchyoke(target=r1, Hradius=XMAX/2-150, Vradius=0, center=(0,0))
    s2 = Scotchyoke(target=r2, Hradius=0, Vradius=YMAX/2-150, phase=0)
    s3 = Scotchyoke(target=l1, Hradius=XMAX/2, Vradius=0)
    s4 = Scotchyoke(target=l2, Hradius=0, Vradius=YMAX/2, phase=0)
    canvas.actions.extend((s1,s2,s3,s4))

    # still parts
    #   ||
    #  =  =
    #   ||
    r11 = Rect(N=l,W=e)  #vertical top left
    position(r11,-w/2-e,w/2+e)
    r12 = Rect(N=l,W=e)  #vertical top right
    position(r12,w/2,w/2+e)
    r13 = Rect(N=l,W=e)  #vertical bottom left
    position(r13,-w/2-e,-l-w/2-e-1)
    r14 = Rect(N=l,W=e)  #vertical bottom right
    position(r14,w/2,-l-w/2-e-1)
    r21 = Rect(N=e,W=l)  #horizontal top right
    position(r21,w/2+e,w/2)
    r22 = Rect(N=e,W=l)  #horizontal bottom right
    position(r22,w/2+e,-e-w/2-1)
    r23 = Rect(N=e,W=l)  #horizontal top left
    position(r23,-l-w/2-e,w/2)
    r24 = Rect(N=e,W=l)  #horizontal bottom left
    position(r24,-l-w/2-e,-e-w/2-1)
    canvas.shapes.extend((r11,r12,r13,r14,r21,r22,r23,r24))


##  MAIN ----------------------------------------------------------------------
if __name__ == "__main__":
    canvas = Canvas(XMAX,YMAX,FPS)  # screen size, FPS
    setup(canvas)
    pyglet.app.run()
